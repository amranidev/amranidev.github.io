{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Amranidev Blog\n\n\nHi, my name is Amrani Houssain, I'm a web developer.\n\n\nHopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.\n\n\nFollow Me\n\n\nTwitter :\n\n\n\nGitHub :", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-amranidev-blog", 
            "text": "Hi, my name is Amrani Houssain, I'm a web developer.  Hopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.", 
            "title": "Welcome to Amranidev Blog"
        }, 
        {
            "location": "/#follow-me", 
            "text": "Twitter :  GitHub :", 
            "title": "Follow Me"
        }, 
        {
            "location": "/split-your-laravel-app/", 
            "text": "Split laravel app\n\n\nSometimes you work on a laravel app project, the app get much bigger by time, especially when it contains a lot of dependencies between modules, and you remind that each module might be splitted or you deserve to make an app for each module, the last one is not a good way because we stuck in redundancy.\n\n\nIt's difficult to maintain all your bussiness logic behind the scence.\n\n\nThats why your app deserve to be splitted into packages/modules.\n\n\nSo you can split modules by creating packages into your app by yourselves, or \nit recomended to use one of these packages.\n\n\n\n\nLpackager\n \n\n\nmodules\n\n\nlaravel-packager\n\n\n\n\nImplementation\n\n\nIn this example we're going to use \nLpackager\n.\n\n\nLpackager propose a way to generate your modules/packages simply without forgeting MVC laravel structure via an artisan command.\n\n\nphp artisan lpackager:package \nPackageName\n \nPath\n \n\"NameSpace\"\n\n\nFile Structure\n\n\n PackageName\n |\n |__config\n |  |__config.php\n |\n |__database\n |  |__migrations \n |\n |__resources\n |  |__views\n |     |__welcome.blade.php\n |\n |__src\n |  |__Http\n |  |  |__Controllers\n |  |  |  |__WelcomeController.php\n |  |  |__routes.php\n |  |__ServiceProvider.php              \n |\n\n\n\n\nAfter \nLpackager\n installation, lets create our first package via an artisan command : \n\n\nphp artisan lpackager:package Client kernel \"Kernel\\Client\"\n\n\n\n\nNote: See Lpackager \nQuick Start\n\n\n\n\nGenerate (Model,Migration,Controller)\n\n\nAll right, Now our \nClient\n package was created and registred.\n\n\nCheck if evreything is okey : \n\n\nhttp://{your-project-url}/Client\n  \n\n\nLests generate Model,Migration,Controller.\n\n\n\n\n1. Generate Model\n\n\nGenerate Person model : \n\n\nphp artisan lpackager:model Person kernel/Client \"Kernel\\Client\"\n\n\nResult (kernel/Client/src/Person.php) :\n\n\n\n\n?php\n\nnamespace Kernel\\Client;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Person extends Model\n{\n    //\n}\n\n\n\n\n\n\n\n2. Generate Migration\n\n\nGenerate Person migration : \n\n\nphp artisan make:migration persons --path=kernel/Client/database/migrations\n\n\ndon't forget to change MigrationClass NameSpace to \nKernel\\Client\\database\n.\n\n\n\n\n3. Generate Controller\n\n\nGenerate PersonController :\n\n\nphp artisan lpackager:controller PersonController Client Kernel/Client \"Kernel\\Client\"\n\n\nResult (kernel/Client/src/Http/Controllers/PersonController.php) :\n\n\n\n\n?php\n\nnamespace Kernel\\Client\\Http\\Controllers\n\nuse ClientAppController as Controller;\n\nclass PersonController extends Controller\n{\n    public function index()\n    {\n        //\n    }\n}\n\n\n\n\n\n\n\nFinally\n\n\nNow we could create CRUD for \nPerson\n, in the next article we're going to talk about how we could generate CRUD for packages, it will save a lot of time for us.\n\n\n\n\n \nto Amrani Houssain\n.", 
            "title": "Split laravel app"
        }, 
        {
            "location": "/split-your-laravel-app/#split-laravel-app", 
            "text": "Sometimes you work on a laravel app project, the app get much bigger by time, especially when it contains a lot of dependencies between modules, and you remind that each module might be splitted or you deserve to make an app for each module, the last one is not a good way because we stuck in redundancy.  It's difficult to maintain all your bussiness logic behind the scence.  Thats why your app deserve to be splitted into packages/modules.  So you can split modules by creating packages into your app by yourselves, or \nit recomended to use one of these packages.   Lpackager    modules  laravel-packager", 
            "title": "Split laravel app"
        }, 
        {
            "location": "/split-your-laravel-app/#implementation", 
            "text": "In this example we're going to use  Lpackager .  Lpackager propose a way to generate your modules/packages simply without forgeting MVC laravel structure via an artisan command.  php artisan lpackager:package  PackageName   Path   \"NameSpace\"", 
            "title": "Implementation"
        }, 
        {
            "location": "/split-your-laravel-app/#file-structure", 
            "text": "PackageName\n |\n |__config\n |  |__config.php\n |\n |__database\n |  |__migrations \n |\n |__resources\n |  |__views\n |     |__welcome.blade.php\n |\n |__src\n |  |__Http\n |  |  |__Controllers\n |  |  |  |__WelcomeController.php\n |  |  |__routes.php\n |  |__ServiceProvider.php              \n |  After  Lpackager  installation, lets create our first package via an artisan command :   php artisan lpackager:package Client kernel \"Kernel\\Client\"   Note: See Lpackager  Quick Start", 
            "title": "File Structure"
        }, 
        {
            "location": "/split-your-laravel-app/#generate-modelmigrationcontroller", 
            "text": "All right, Now our  Client  package was created and registred.  Check if evreything is okey :   http://{your-project-url}/Client     Lests generate Model,Migration,Controller.", 
            "title": "Generate (Model,Migration,Controller)"
        }, 
        {
            "location": "/split-your-laravel-app/#1-generate-model", 
            "text": "Generate Person model :   php artisan lpackager:model Person kernel/Client \"Kernel\\Client\"  Result (kernel/Client/src/Person.php) :   ?php\n\nnamespace Kernel\\Client;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Person extends Model\n{\n    //\n}", 
            "title": "1. Generate Model"
        }, 
        {
            "location": "/split-your-laravel-app/#2-generate-migration", 
            "text": "Generate Person migration :   php artisan make:migration persons --path=kernel/Client/database/migrations  don't forget to change MigrationClass NameSpace to  Kernel\\Client\\database .", 
            "title": "2. Generate Migration"
        }, 
        {
            "location": "/split-your-laravel-app/#3-generate-controller", 
            "text": "Generate PersonController :  php artisan lpackager:controller PersonController Client Kernel/Client \"Kernel\\Client\"  Result (kernel/Client/src/Http/Controllers/PersonController.php) :   ?php\n\nnamespace Kernel\\Client\\Http\\Controllers\n\nuse ClientAppController as Controller;\n\nclass PersonController extends Controller\n{\n    public function index()\n    {\n        //\n    }\n}", 
            "title": "3. Generate Controller"
        }, 
        {
            "location": "/split-your-laravel-app/#finally", 
            "text": "Now we could create CRUD for  Person , in the next article we're going to talk about how we could generate CRUD for packages, it will save a lot of time for us.     to Amrani Houssain .", 
            "title": "Finally"
        }, 
        {
            "location": "/crud-generator-for-packages/", 
            "text": "CRUD generator for packages\n\n\nPreviously, we've covered how to split a laravel app into packages/modules, and create \nClient\n package which include \nPerson\n model,Migration and Controller.\n\n\nSee \nSplit laravel app\n.\n\n\nAllright, we can create CRUD for \nPerson\n that include views and controller functionalities, but all we need is a shortcut to generate crud faster for our package.\n\n\nin this example we're going to use scaffold-interface \n(scaffold-interface)\n\n\nScaffold-interface is a smart CRUD generator for laravel \n(scaffold-interface)\n that allows you to generate model,views and controller just in few clicks.\n\n\nImplementation\n\n\nWell, after \nscaffold-interface\n installation, we've to remove our last class and resources of \nPerson\n, and recreateing it with scaffold-interface.\n\n\nAs you can see \nscaffold-interface\n has an config file \nconfig/amranidev/config.php\n that we must replace it with \nClient\n package config file \nkernel/Client/config/config.php\n to allow \nScaffold-Interface\n interact with our package.\n\n\n\n\n\n\n?php\n\n/*\n |-------------------------------------------------------------------------\n | Client config for scaffolding\n |-------------------------------------------------------------------------\n |\n | You can replace this conf file with config/amranidev/config.php\n | to let scaffold-interface intercat with \nClient\n package.\n |\n */\nreturn [\n\n        'package' =\n 'Client',\n\n        'model' =\n base_path() . '/kernel/Client/src',\n\n        'views' =\n base_path() . '/kernel/Client/resources/views',\n\n        'controller' =\n base_path() . '/kernel/Client/src/Http/Controllers',\n\n        'migration' =\n base_path() . '/kernel/Client/database/migrations',\n\n        'database' =\n '/kernel/Client/database/migrations',\n\n        'routes' =\n base_path() . '/kernel/Client/src/Http/routes.php',\n\n        'controllerNameSpace' =\n 'Kernel\\Client\\\\Http\\\\Controllers',\n\n        'modelNameSpace' =\n 'Kernel\\Client',\n\n        'loadViews' =\n 'Client',\n\n       ];\n\n\n\n\n\n\n\nNow lets create our first CRUD for our package, go to \nhttp://{your-project-url}/scaffold\n.\n\n\n\n\nSo as you can see scaffolder told us that we're working on \nClient\n package environment, so cretae your first table \nPerson\n and just add your fields, then click on ready and done.\n\n\nAnd don't forget to migrate schema.\n\n\nFinally\n\n\nCongratulations, the \nPerson\n CRUD has been generated into \nClient\n Package just in few seconds.\n\n\n\n\n\n\nNOTE : be aware about switching between packages, and save scaffold-interface laravel config environment somewhere in your project, to use it if necessary.\n\n\nNOTE : if you want to generate OneToMany relationships between two different packages,\nall you have to care about is the controller namespace, that can be a kind of troubleshooting.\n\n\n\n\n\n\n \nto Amrani Houssain\n.", 
            "title": "CRUD for packages"
        }, 
        {
            "location": "/crud-generator-for-packages/#crud-generator-for-packages", 
            "text": "Previously, we've covered how to split a laravel app into packages/modules, and create  Client  package which include  Person  model,Migration and Controller.  See  Split laravel app .  Allright, we can create CRUD for  Person  that include views and controller functionalities, but all we need is a shortcut to generate crud faster for our package.  in this example we're going to use scaffold-interface  (scaffold-interface)  Scaffold-interface is a smart CRUD generator for laravel  (scaffold-interface)  that allows you to generate model,views and controller just in few clicks.", 
            "title": "CRUD generator for packages"
        }, 
        {
            "location": "/crud-generator-for-packages/#implementation", 
            "text": "Well, after  scaffold-interface  installation, we've to remove our last class and resources of  Person , and recreateing it with scaffold-interface.  As you can see  scaffold-interface  has an config file  config/amranidev/config.php  that we must replace it with  Client  package config file  kernel/Client/config/config.php  to allow  Scaffold-Interface  interact with our package.    ?php\n\n/*\n |-------------------------------------------------------------------------\n | Client config for scaffolding\n |-------------------------------------------------------------------------\n |\n | You can replace this conf file with config/amranidev/config.php\n | to let scaffold-interface intercat with  Client  package.\n |\n */\nreturn [\n\n        'package' =  'Client',\n\n        'model' =  base_path() . '/kernel/Client/src',\n\n        'views' =  base_path() . '/kernel/Client/resources/views',\n\n        'controller' =  base_path() . '/kernel/Client/src/Http/Controllers',\n\n        'migration' =  base_path() . '/kernel/Client/database/migrations',\n\n        'database' =  '/kernel/Client/database/migrations',\n\n        'routes' =  base_path() . '/kernel/Client/src/Http/routes.php',\n\n        'controllerNameSpace' =  'Kernel\\Client\\\\Http\\\\Controllers',\n\n        'modelNameSpace' =  'Kernel\\Client',\n\n        'loadViews' =  'Client',\n\n       ];   Now lets create our first CRUD for our package, go to  http://{your-project-url}/scaffold .   So as you can see scaffolder told us that we're working on  Client  package environment, so cretae your first table  Person  and just add your fields, then click on ready and done.  And don't forget to migrate schema.", 
            "title": "Implementation"
        }, 
        {
            "location": "/crud-generator-for-packages/#finally", 
            "text": "Congratulations, the  Person  CRUD has been generated into  Client  Package just in few seconds.    NOTE : be aware about switching between packages, and save scaffold-interface laravel config environment somewhere in your project, to use it if necessary.  NOTE : if you want to generate OneToMany relationships between two different packages,\nall you have to care about is the controller namespace, that can be a kind of troubleshooting.      to Amrani Houssain .", 
            "title": "Finally"
        }, 
        {
            "location": "/scaffold-interface/", 
            "text": "Scaffold-Interface (full documentation page)\n\n\nOverview\n\n\nThe scaffold-interface is a pakcage builds for laravel web framework that allows you to develop your web project faster and easier saving a lot of times, with a powerful CRUD generator with relationships (ManyToMany, OneToMany), also an admin controle panel with user management system using spatie \nspatie\n.\n\n\nFeatures\n\n\n\n\n\n\nGenerate your model,views,controller and migrations just in a few clicks.\n\n\n\n\n\n\nViews support Bootstrap and Materializecss.\n\n\n\n\n\n\nGenerate OneToMany relationships including views and controllers.\n\n\n\n\n\n\nGenerate ManyToMany relationships.\n\n\n\n\n\n\nWebsocket using \nPusher Notifications\n.\n\n\n\n\n\n\nAdminLTE dashboard template with users management system (users-roles-permissions) using \nlaravel-permission\n.\n\n\n\n\n\n\nSoftdeletes and timestamps.\n\n\n\n\n\n\nA delete confirmation message.\n\n\n\n\n\n\nUsing an interface to design your table.\n\n\n\n\n\n\nRollbacking possibility.\n\n\n\n\n\n\nGenerate CRUD for packages, see \nLpackager\n, \nCRUD for packages/modules\n.\n\n\n\n\n\n\nRequires\n\n\n\n\nPHP \n=5.6", 
            "title": "Scaffold-interface"
        }, 
        {
            "location": "/scaffold-interface/#scaffold-interface-full-documentation-page", 
            "text": "", 
            "title": "Scaffold-Interface (full documentation page)"
        }, 
        {
            "location": "/scaffold-interface/#overview", 
            "text": "The scaffold-interface is a pakcage builds for laravel web framework that allows you to develop your web project faster and easier saving a lot of times, with a powerful CRUD generator with relationships (ManyToMany, OneToMany), also an admin controle panel with user management system using spatie  spatie .", 
            "title": "Overview"
        }, 
        {
            "location": "/scaffold-interface/#features", 
            "text": "Generate your model,views,controller and migrations just in a few clicks.    Views support Bootstrap and Materializecss.    Generate OneToMany relationships including views and controllers.    Generate ManyToMany relationships.    Websocket using  Pusher Notifications .    AdminLTE dashboard template with users management system (users-roles-permissions) using  laravel-permission .    Softdeletes and timestamps.    A delete confirmation message.    Using an interface to design your table.    Rollbacking possibility.    Generate CRUD for packages, see  Lpackager ,  CRUD for packages/modules .", 
            "title": "Features"
        }, 
        {
            "location": "/scaffold-interface/#requires", 
            "text": "PHP  =5.6", 
            "title": "Requires"
        }, 
        {
            "location": "/ajaxis/", 
            "text": "ajaxis", 
            "title": "Ajaxis"
        }, 
        {
            "location": "/ajaxis/#ajaxis", 
            "text": "", 
            "title": "ajaxis"
        }, 
        {
            "location": "/lpackager/", 
            "text": "Lpackager", 
            "title": "Lpackager"
        }, 
        {
            "location": "/lpackager/#lpackager", 
            "text": "", 
            "title": "Lpackager"
        }
    ]
}
{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Amranidev Blog\n\n\nHi, my name is Amrani Houssain, I'm a web developer.\n\n\nHopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.\n\n\nFollow Me\n\n\nTwitter :\n\n\n\nGitHub :", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-amranidev-blog", 
            "text": "Hi, my name is Amrani Houssain, I'm a web developer.  Hopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.", 
            "title": "Welcome to Amranidev Blog"
        }, 
        {
            "location": "/#follow-me", 
            "text": "Twitter :  GitHub :", 
            "title": "Follow Me"
        }, 
        {
            "location": "/split-your-laravel-app/", 
            "text": "Split laravel app\n\n\nSometimes you work on a laravel app project, the app get much bigger by time, especially when it contains a lot of dependencies between modules, and you remind that each module might be splitted or you deserve to make an app for each module, the last one is not a good way because we stuck in redundancy.\n\n\nIt's difficult to maintain all your bussiness logic behind the scence.\n\n\nThats why your app deserve to be splitted into packages/modules.\n\n\nSo you can split modules by creating packages into your app by yourselves, or \nit recomended to use one of these packages.\n\n\n\n\nLpackager\n \n\n\nmodules\n\n\nlaravel-packager\n\n\n\n\nImplementation\n\n\nIn this example we're going to use \nLpackager\n.\n\n\nLpackager propose a way to generate your modules/packages simply without forgeting MVC laravel structure via an artisan command.\n\n\nphp artisan lpackager:package \nPackageName\n \nPath\n \n\"NameSpace\"\n\n\nFile Structure\n\n\n PackageName\n |\n |__config\n |  |__config.php\n |\n |__database\n |  |__migrations \n |\n |__resources\n |  |__views\n |     |__welcome.blade.php\n |\n |__src\n |  |__Http\n |  |  |__Controllers\n |  |  |  |__WelcomeController.php\n |  |  |__routes.php\n |  |__ServiceProvider.php              \n |\n\n\n\n\nAfter \nLpackager\n installation, lets create our first package via an artisan command : \n\n\nphp artisan lpackager:package Client kernel \"Kernel\\Client\"\n\n\n\n\nNote: See Lpackager \nQuick Start\n\n\n\n\nGenerate (Model,Migration,Controller)\n\n\nAll right, Now our \nClient\n package was created and registred.\n\n\nCheck if evreything is okey : \n\n\nhttp://{your-project-url}/Client\n  \n\n\nLests generate Model,Migration,Controller.\n\n\n\n\n1. Generate Model\n\n\nGenerate Person model : \n\n\nphp artisan lpackager:model Person kernel/Client \"Kernel\\Client\"\n\n\nResult (kernel/Client/src/Person.php) :\n\n\n\n\n?php\n\nnamespace Kernel\\Client;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Person extends Model\n{\n    //\n}\n\n\n\n\n\n\n\n2. Generate Migration\n\n\nGenerate Person migration : \n\n\nphp artisan make:migration persons --path=kernel/Client/database/migrations\n\n\ndon't forget to change MigrationClass NameSpace to \nKernel\\Client\\database\n.\n\n\n\n\n3. Generate Controller\n\n\nGenerate PersonController :\n\n\nphp artisan lpackager:controller PersonController Client Kernel/Client \"Kernel\\Client\"\n\n\nResult (kernel/Client/src/Http/Controllers/PersonController.php) :\n\n\n\n\n?php\n\nnamespace Kernel\\Client\\Http\\Controllers\n\nuse ClientAppController as Controller;\n\nclass PersonController extends Controller\n{\n    public function index()\n    {\n        //\n    }\n}\n\n\n\n\n\n\n\nFinally\n\n\nNow we could create CRUD for \nPerson\n, in the next article we're going to talk about how we could generate CRUD for packages, it will save a lot of time for us.\n\n\n\n\n \nto Amrani Houssain\n.", 
            "title": "Split laravel app"
        }, 
        {
            "location": "/split-your-laravel-app/#split-laravel-app", 
            "text": "Sometimes you work on a laravel app project, the app get much bigger by time, especially when it contains a lot of dependencies between modules, and you remind that each module might be splitted or you deserve to make an app for each module, the last one is not a good way because we stuck in redundancy.  It's difficult to maintain all your bussiness logic behind the scence.  Thats why your app deserve to be splitted into packages/modules.  So you can split modules by creating packages into your app by yourselves, or \nit recomended to use one of these packages.   Lpackager    modules  laravel-packager", 
            "title": "Split laravel app"
        }, 
        {
            "location": "/split-your-laravel-app/#implementation", 
            "text": "In this example we're going to use  Lpackager .  Lpackager propose a way to generate your modules/packages simply without forgeting MVC laravel structure via an artisan command.  php artisan lpackager:package  PackageName   Path   \"NameSpace\"", 
            "title": "Implementation"
        }, 
        {
            "location": "/split-your-laravel-app/#file-structure", 
            "text": "PackageName\n |\n |__config\n |  |__config.php\n |\n |__database\n |  |__migrations \n |\n |__resources\n |  |__views\n |     |__welcome.blade.php\n |\n |__src\n |  |__Http\n |  |  |__Controllers\n |  |  |  |__WelcomeController.php\n |  |  |__routes.php\n |  |__ServiceProvider.php              \n |  After  Lpackager  installation, lets create our first package via an artisan command :   php artisan lpackager:package Client kernel \"Kernel\\Client\"   Note: See Lpackager  Quick Start", 
            "title": "File Structure"
        }, 
        {
            "location": "/split-your-laravel-app/#generate-modelmigrationcontroller", 
            "text": "All right, Now our  Client  package was created and registred.  Check if evreything is okey :   http://{your-project-url}/Client     Lests generate Model,Migration,Controller.", 
            "title": "Generate (Model,Migration,Controller)"
        }, 
        {
            "location": "/split-your-laravel-app/#1-generate-model", 
            "text": "Generate Person model :   php artisan lpackager:model Person kernel/Client \"Kernel\\Client\"  Result (kernel/Client/src/Person.php) :   ?php\n\nnamespace Kernel\\Client;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Person extends Model\n{\n    //\n}", 
            "title": "1. Generate Model"
        }, 
        {
            "location": "/split-your-laravel-app/#2-generate-migration", 
            "text": "Generate Person migration :   php artisan make:migration persons --path=kernel/Client/database/migrations  don't forget to change MigrationClass NameSpace to  Kernel\\Client\\database .", 
            "title": "2. Generate Migration"
        }, 
        {
            "location": "/split-your-laravel-app/#3-generate-controller", 
            "text": "Generate PersonController :  php artisan lpackager:controller PersonController Client Kernel/Client \"Kernel\\Client\"  Result (kernel/Client/src/Http/Controllers/PersonController.php) :   ?php\n\nnamespace Kernel\\Client\\Http\\Controllers\n\nuse ClientAppController as Controller;\n\nclass PersonController extends Controller\n{\n    public function index()\n    {\n        //\n    }\n}", 
            "title": "3. Generate Controller"
        }, 
        {
            "location": "/split-your-laravel-app/#finally", 
            "text": "Now we could create CRUD for  Person , in the next article we're going to talk about how we could generate CRUD for packages, it will save a lot of time for us.     to Amrani Houssain .", 
            "title": "Finally"
        }, 
        {
            "location": "/crud-generator-for-packages/", 
            "text": "CRUD generator for packages\n\n\nPreviously, we've covered how to split a laravel app into packages/modules, and create \nClient\n package which include \nPerson\n model,Migration and Controller.\n\n\nSee \nSplit laravel app\n.\n\n\nAllright, we can create CRUD for \nPerson\n that include views and controller functionalities, but all we need is a shortcut to generate crud faster for our package.\n\n\nin this example we're going to use scaffold-interface \n(scaffold-interface)\n\n\nScaffold-interface is a smart CRUD generator for laravel \n(scaffold-interface)\n that allows you to generate model,views and controller just in few clicks.\n\n\nImplementation\n\n\nWell, after \nscaffold-interface\n installation, we've to remove our last class and resources of \nPerson\n, and recreateing it with scaffold-interface.\n\n\nAs you can see \nscaffold-interface\n has an config file \nconfig/amranidev/config.php\n that we must replace it with \nClient\n package config file \nkernel/Client/config/config.php\n to allow \nScaffold-Interface\n interact with our package.\n\n\n\n\n\n\n?php\n\n/*\n |-------------------------------------------------------------------------\n | Client config for scaffolding\n |-------------------------------------------------------------------------\n |\n | You can replace this conf file with config/amranidev/config.php\n | to let scaffold-interface intercat with \nClient\n package.\n |\n */\nreturn [\n\n        'package' =\n 'Client',\n\n        'model' =\n base_path() . '/kernel/Client/src',\n\n        'views' =\n base_path() . '/kernel/Client/resources/views',\n\n        'controller' =\n base_path() . '/kernel/Client/src/Http/Controllers',\n\n        'migration' =\n base_path() . '/kernel/Client/database/migrations',\n\n        'database' =\n '/kernel/Client/database/migrations',\n\n        'routes' =\n base_path() . '/kernel/Client/src/Http/routes.php',\n\n        'controllerNameSpace' =\n 'Kernel\\Client\\\\Http\\\\Controllers',\n\n        'modelNameSpace' =\n 'Kernel\\Client',\n\n        'loadViews' =\n 'Client',\n\n       ];\n\n\n\n\n\n\n\nNow lets create our first CRUD for our package, go to \nhttp://{your-project-url}/scaffold\n.\n\n\n\n\nSo as you can see scaffolder told us that we're working on \nClient\n package environment, so cretae your first table \nPerson\n and just add your fields, then click on ready and done.\n\n\nAnd don't forget to migrate schema.\n\n\nFinally\n\n\nCongratulations, the \nPerson\n CRUD has been generated into \nClient\n Package just in few seconds.\n\n\n\n\n\n\nNOTE : be aware about switching between packages, and save scaffold-interface laravel config environment somewhere in your project, to use it if necessary.\n\n\nNOTE : if you want to generate OneToMany relationships between two different packages,\nall you have to care about is the controller namespace, that can be a kind of troubleshooting.\n\n\n\n\n\n\n \nto Amrani Houssain\n.", 
            "title": "CRUD for packages"
        }, 
        {
            "location": "/crud-generator-for-packages/#crud-generator-for-packages", 
            "text": "Previously, we've covered how to split a laravel app into packages/modules, and create  Client  package which include  Person  model,Migration and Controller.  See  Split laravel app .  Allright, we can create CRUD for  Person  that include views and controller functionalities, but all we need is a shortcut to generate crud faster for our package.  in this example we're going to use scaffold-interface  (scaffold-interface)  Scaffold-interface is a smart CRUD generator for laravel  (scaffold-interface)  that allows you to generate model,views and controller just in few clicks.", 
            "title": "CRUD generator for packages"
        }, 
        {
            "location": "/crud-generator-for-packages/#implementation", 
            "text": "Well, after  scaffold-interface  installation, we've to remove our last class and resources of  Person , and recreateing it with scaffold-interface.  As you can see  scaffold-interface  has an config file  config/amranidev/config.php  that we must replace it with  Client  package config file  kernel/Client/config/config.php  to allow  Scaffold-Interface  interact with our package.    ?php\n\n/*\n |-------------------------------------------------------------------------\n | Client config for scaffolding\n |-------------------------------------------------------------------------\n |\n | You can replace this conf file with config/amranidev/config.php\n | to let scaffold-interface intercat with  Client  package.\n |\n */\nreturn [\n\n        'package' =  'Client',\n\n        'model' =  base_path() . '/kernel/Client/src',\n\n        'views' =  base_path() . '/kernel/Client/resources/views',\n\n        'controller' =  base_path() . '/kernel/Client/src/Http/Controllers',\n\n        'migration' =  base_path() . '/kernel/Client/database/migrations',\n\n        'database' =  '/kernel/Client/database/migrations',\n\n        'routes' =  base_path() . '/kernel/Client/src/Http/routes.php',\n\n        'controllerNameSpace' =  'Kernel\\Client\\\\Http\\\\Controllers',\n\n        'modelNameSpace' =  'Kernel\\Client',\n\n        'loadViews' =  'Client',\n\n       ];   Now lets create our first CRUD for our package, go to  http://{your-project-url}/scaffold .   So as you can see scaffolder told us that we're working on  Client  package environment, so cretae your first table  Person  and just add your fields, then click on ready and done.  And don't forget to migrate schema.", 
            "title": "Implementation"
        }, 
        {
            "location": "/crud-generator-for-packages/#finally", 
            "text": "Congratulations, the  Person  CRUD has been generated into  Client  Package just in few seconds.    NOTE : be aware about switching between packages, and save scaffold-interface laravel config environment somewhere in your project, to use it if necessary.  NOTE : if you want to generate OneToMany relationships between two different packages,\nall you have to care about is the controller namespace, that can be a kind of troubleshooting.      to Amrani Houssain .", 
            "title": "Finally"
        }, 
        {
            "location": "/singletone/", 
            "text": "Design Patterns in PHP (Singletone)\n\n\nIn software engineering, the singleton pattern is a design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton. (\nWikipedia\n)\n\n\nUses\n\n\n\n\n\n\nThe abstract factory, builder, and prototype patterns can use Singletons in their implementation.\n\n\n\n\n\n\nFacade objects are often singletons because only one Facade object is required.\n\n\n\n\n\n\nState objects are often singletons.\n\n\n\n\n\n\nRules\n\n\n\n\n\n\nDeclaring all constructors of the class to be \nprivate\n.\n\n\n\n\n\n\nProviding a static method that returns a reference to the instance.\n\n\n\n\n\n\nImplementation\n\n\nAn implementation of the singleton pattern must:\n\n\nEnsure that only one instance of the singleton class ever exists, and provide global access to that instance.\n\n\nSo lets say that we need to create an database class that can return only a one instance.\n\n\n?php\n\nclass Database\n{\n    /**\n     * Database Instance.\n     * \n     * @static $instance\n     */ \n    public static $instance = null;\n\n    /**\n     * Database Constructor\n     */ \n    private function __construct()\n    {}\n\n    /**\n     * Get Database instance\n     * \n     * @return self\n     */ \n    public static function getInstance()\n    {\n        if (!self::$instance)\n        self::$instance = new self();\n\n        return self::$instance;\n    }\n\n    /**\n     * Database clone\n     */ \n    private function __clone()\n    {}\n}\n\n///Testing some calls to that class\n$instance_1 = Database::getInstance();\nvar_dump($instance_1);\n\n$instance_2 = Database::getInstance();\nvar_dump($instance_2);\n\n\n\n\nResult : \n\n\nclass Database#1 (0) {\n}\nclass Database#1 (0) {\n}\n\n\n\n\nConclusion\n\n\nAs you can see, we receive the same instance even when we try to call Database class twice.\n\n\nIn the singleton pattern a class can distribute one instance of itself to other classes.", 
            "title": "Singletone Pattern"
        }, 
        {
            "location": "/singletone/#design-patterns-in-php-singletone", 
            "text": "In software engineering, the singleton pattern is a design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton. ( Wikipedia )", 
            "title": "Design Patterns in PHP (Singletone)"
        }, 
        {
            "location": "/singletone/#uses", 
            "text": "The abstract factory, builder, and prototype patterns can use Singletons in their implementation.    Facade objects are often singletons because only one Facade object is required.    State objects are often singletons.", 
            "title": "Uses"
        }, 
        {
            "location": "/singletone/#rules", 
            "text": "Declaring all constructors of the class to be  private .    Providing a static method that returns a reference to the instance.", 
            "title": "Rules"
        }, 
        {
            "location": "/singletone/#implementation", 
            "text": "An implementation of the singleton pattern must:  Ensure that only one instance of the singleton class ever exists, and provide global access to that instance.  So lets say that we need to create an database class that can return only a one instance.  ?php\n\nclass Database\n{\n    /**\n     * Database Instance.\n     * \n     * @static $instance\n     */ \n    public static $instance = null;\n\n    /**\n     * Database Constructor\n     */ \n    private function __construct()\n    {}\n\n    /**\n     * Get Database instance\n     * \n     * @return self\n     */ \n    public static function getInstance()\n    {\n        if (!self::$instance)\n        self::$instance = new self();\n\n        return self::$instance;\n    }\n\n    /**\n     * Database clone\n     */ \n    private function __clone()\n    {}\n}\n\n///Testing some calls to that class\n$instance_1 = Database::getInstance();\nvar_dump($instance_1);\n\n$instance_2 = Database::getInstance();\nvar_dump($instance_2);  Result :   class Database#1 (0) {\n}\nclass Database#1 (0) {\n}", 
            "title": "Implementation"
        }, 
        {
            "location": "/singletone/#conclusion", 
            "text": "As you can see, we receive the same instance even when we try to call Database class twice.  In the singleton pattern a class can distribute one instance of itself to other classes.", 
            "title": "Conclusion"
        }, 
        {
            "location": "/scaffold-interface/", 
            "text": "Scaffold-Interface (full documentation page)\n\n\n\n\nOverview\n\n\nScaffold Interface is a Laravel package designed to speed up your web development process. Thanks to its powerful CRUD Generator that support all types of tables relationships, and its admin control panel shipped with a built-in User Management System.\n\n\nFeatures\n\n\n\n\n\n\nGenerate your models,views,controllers and migrations just in a few clicks.\n\n\n\n\n\n\nViews scaffolding support Bootstrap and Materialize css.\n\n\n\n\n\n\nGenerate (OneToMany,ManyToMany) relationships including views and controllers.\n\n\n\n\n\n\nWebsockets using \nPusher Notifications\n.\n\n\n\n\n\n\nAdminLTE dashboard template with users management system (users-roles-permissions) using \nlaravel-permission\n.\n\n\n\n\n\n\nSoftdeletes and timestamps.\n\n\n\n\n\n\nA delete confirmation message.\n\n\n\n\n\n\nUsing an interface to design your table.\n\n\n\n\n\n\nRollback possibility.\n\n\n\n\n\n\nGenerate CRUD for packages, see \nLpackager\n, \nCRUD for packages/modules\n.\n\n\n\n\n\n\nPrerequisites\n\n\n\n\nPHP \n=5.6\n\n\n\n\nLaravel supported versions\n\n\n\n\n\n\n\n\nLaravel version\n\n\nScaffold-Interface version\n\n\n\n\n\n\n\n\n\n\nv5.1\n\n\nv1.4.11 or less\n\n\n\n\n\n\nv5.2 and v5.3\n\n\nv1.5.*\n\n\n\n\n\n\n\n\n\n\nNote for Laravel v5.3.* :\n\n\n\n\nMake sure that \nroutes path is configured.\n\nGo to \nconfig/amranidev/config.php\n, and change routes to \n'routes' =\n base_path('routes/web.php')\n\n\nI. Package installation\n\n\n1. Add the package to your dependencies in composer.json:\n\n\nrequire : {\n\nAmranidev/scaffold-interface\n: \nv1.6.*\n\n}\n\n\n\n\n2. update composer:\n\n\n$ composer update\n\n\n\n\n3. Add the service providers to config/app.php:\n\n\nAmranidev\\ScaffoldInterface\\ScaffoldInterfaceServiceProvider::class,\nAmranidev\\Ajaxis\\AjaxisServiceProvider::class,\nSpatie\\Permission\\PermissionServiceProvider::class,\nVinkla\\Pusher\\PusherServiceProvider::class,\n\n\n\n\n4. Publish the assets in your application with:\n\n\n$ php artisan vendor:publish\n\n\n\n\n\n\nWhat does this package publishes:\n\n\napp/Http/Controllers/UserController.php\n\n\napp/Http/Controllers/RoleController.php\n\n\napp/Http/Controllers/PermissionController.php\n\n\nresources/views/scaffold-interface\n\n\npublic/js/scaffold-interface-js\n\n\npublic/css/scaffold-interface-css\n\n\nconfig/amranidev/config.php\n\n\ndatabase/migrations/migration_file\n\n\n\n\n\n\n\n\n5. Migrate for the Scaffold Interface table:\n\n\n$ php artisan migrate\n\n\n\n\n6. Authentication scaffolding:\n\n\n$ php artisan make:auth\n\n\n\n\nCongratulations, you have successfully installed Scaffold Interface!\n\n\nII. Usage\n\n\n\n\nGo to \nhttp://{your-project-url}/scaffold\n.\n\n\n\n\n\n\n\n\nClick on new table and fill the form, then click on ready and done.\n\n\n\n\n\n\nMVC files has been generated.\n\n\n\n\n\n\nMigrate your schema to the database by clicking on the Migrate button.\n\n\n\n\n\n\nNow your model is ready to use.\n\n\n\n\nTo delete your entity just rollback its table from database clicking on rollback button first, then click on delete button to be deleted form your app.\n\n\n\n\nIII. Relationships\n\n\n1. OneToMany\n\n\nThis package provides a simple short way to generate OneToMany relationship.\n\n\nWe could use our previous example \nProduct\n entity.\n\n\nSo lets create a new entity called \nCommand\n.\n\n\nBefore ending creation, click on OneToMany button, choose product table, choose associated field and \nclick on OneToMany Button again to be confirmed\n.   \n\n\n\n\nThis will create \na model with relation methods ,views, controller and migration file containing foreignkeys\n, for sure you can change whatever you want.\n\n\nThen click on migration button.\n\n\n\n\n2. ManyToMany\n\n\nTo generate ManyToMany relationship between tow tables, click on ManyToMany button, choose tables via combobox (table1,table2) then click on create.\n\n\nWell, this will create a new pivot table schema ready to be migrated adding ManyToMany raltionship methods to models.\n\n\nThis doesn't create views,controllers and routes, because we belive that each web artisan has his own unique methodology.\n\n\n\n\nIII. Control Panel AdminLTE\n\n\nScaffold-interface provids a simple control panel containing user management system using \nlaravel-permission\n package to menage users-roles-permissions easily.\n\n\n\n\nGo a head to terminal and create a new user.\n\n\n\n\n$ php artisan tinker\n:\n\n\n$user = new \\App\\User();\n$user-\nname = \njohn doe\n;\n$user-\nemail = \njhondoe@example.com\n;\n$user-\npassword = Hash::make(\npassword\n);\n$user-\nsave();\n\n\n\n\n\n\nAdd HasRole dependency to app/User.php:\n\n\n\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass User extends Authenticatable\n{\n  use HasRoles;\n\n  // ...\n}\n\n\n\n\n\n\nThen click on dashboard button and login.\n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n\nYou can determine if a user has a certain role:\n\n\n\n\n$user-\nhasRole('writer');\n\n\n\n\nYou can also determine if a user has any of a given list of roles:\n\n\n\n\n$user-\nhasAnyRole(Role::all());\n\n\n\n\nYou can determine if a role has a certain permission:\n\n\n\n\n$role-\nhasPermissionTo('edit articles');\n\n\nWant more ? check \nlaravel-permission\n.\n\n\nIV. Pusher Notifications\n\n\n\n\nWhat is pusher ?\n\n\nPusher is a hosted service that makes it super-easy to add real-time data and functionality to web and mobile applications.\n\n\nPusher sits as a real-time layer between your servers and your clients. Pusher maintains persistent connections to the clients - over WebSocket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\n\nPusher offers libraries to integrate into all the main runtimes and frameworks. PHP, Ruby, Python, Java, .NET, Go and Node on the server and JavaScript, Objective-C (iOS) and Java (Android) on the client.\n\n\nPusher is a highly scalable real-time solution established in 2010 and has lots of awesome customers including GitHub, MailChimp, CodeShip, The Financial Times, UserVoice, Travis CI and QuizUp.\n\n\nBefore we get started, \nyou have to create a pusher account.\n\n\nPlease sign up for a free Pusher account via \npusher.com/signup\n, and create a new app via Pusher dashboard.\n\n\nConfiguration.\n\n\n\n\nGo to \n.env\n and define (app_id,key,and secret)\n\n\n\n\nPUSHER_APP_ID = your_app_id\nPUSHER_KEY = your_key\nPUSHER_SECRET = your_secret\n\n\n\n\n\n\nGo to config/pusher.php and define pusher credentials env.\n\n\n\n\n    'connections' =\n [\n\n        'main' =\n [\n            'auth_key' =\n env('PUSHER_KEY'),\n            'secret' =\n env('PUSHER_SECRET'),\n            'app_id' =\n env('PUSHER_APP_ID'),\n            'options' =\n [],\n            'host' =\n null,\n            'port' =\n null,\n            'timeout' =\n null,\n        ],\n\n\n\n\nChannels \n Events.\n\n\nBy default \nScaffold-Interface\n used \ntest-channel\n as a \nchannel\n and \ntest-event\n as an \nevent\n\n\nBackend\n\n\nSo when you create a new entity, the package creates back-end pusher notification code automatically behind the scenes.\n\n\nCheck the \nEntity Controller\n, we took our previous example, \nProduct\n entity.\n\n\n\n\nFrontend\n\n\nThe fornt end code was already defined in \nresources/views/scaffold-interface/layouts/app.blade.php\n.\n\n\nContribution\n\n\nAny ideas are welcome. Feel free to submit any issues or pull requests.\n\n\nFollow me\n\n\nTwitter :\n\n\n\nGitHub :", 
            "title": "Scaffold-interface"
        }, 
        {
            "location": "/scaffold-interface/#scaffold-interface-full-documentation-page", 
            "text": "", 
            "title": "Scaffold-Interface (full documentation page)"
        }, 
        {
            "location": "/scaffold-interface/#overview", 
            "text": "Scaffold Interface is a Laravel package designed to speed up your web development process. Thanks to its powerful CRUD Generator that support all types of tables relationships, and its admin control panel shipped with a built-in User Management System.", 
            "title": "Overview"
        }, 
        {
            "location": "/scaffold-interface/#features", 
            "text": "Generate your models,views,controllers and migrations just in a few clicks.    Views scaffolding support Bootstrap and Materialize css.    Generate (OneToMany,ManyToMany) relationships including views and controllers.    Websockets using  Pusher Notifications .    AdminLTE dashboard template with users management system (users-roles-permissions) using  laravel-permission .    Softdeletes and timestamps.    A delete confirmation message.    Using an interface to design your table.    Rollback possibility.    Generate CRUD for packages, see  Lpackager ,  CRUD for packages/modules .", 
            "title": "Features"
        }, 
        {
            "location": "/scaffold-interface/#prerequisites", 
            "text": "PHP  =5.6", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/scaffold-interface/#laravel-supported-versions", 
            "text": "Laravel version  Scaffold-Interface version      v5.1  v1.4.11 or less    v5.2 and v5.3  v1.5.*      Note for Laravel v5.3.* :   Make sure that  routes path is configured. \nGo to  config/amranidev/config.php , and change routes to  'routes' =  base_path('routes/web.php')", 
            "title": "Laravel supported versions"
        }, 
        {
            "location": "/scaffold-interface/#i-package-installation", 
            "text": "", 
            "title": "I. Package installation"
        }, 
        {
            "location": "/scaffold-interface/#1-add-the-package-to-your-dependencies-in-composerjson", 
            "text": "require : { Amranidev/scaffold-interface :  v1.6.* \n}", 
            "title": "1. Add the package to your dependencies in composer.json:"
        }, 
        {
            "location": "/scaffold-interface/#2-update-composer", 
            "text": "$ composer update", 
            "title": "2. update composer:"
        }, 
        {
            "location": "/scaffold-interface/#3-add-the-service-providers-to-configappphp", 
            "text": "Amranidev\\ScaffoldInterface\\ScaffoldInterfaceServiceProvider::class,\nAmranidev\\Ajaxis\\AjaxisServiceProvider::class,\nSpatie\\Permission\\PermissionServiceProvider::class,\nVinkla\\Pusher\\PusherServiceProvider::class,", 
            "title": "3. Add the service providers to config/app.php:"
        }, 
        {
            "location": "/scaffold-interface/#4-publish-the-assets-in-your-application-with", 
            "text": "$ php artisan vendor:publish   What does this package publishes:  app/Http/Controllers/UserController.php  app/Http/Controllers/RoleController.php  app/Http/Controllers/PermissionController.php  resources/views/scaffold-interface  public/js/scaffold-interface-js  public/css/scaffold-interface-css  config/amranidev/config.php  database/migrations/migration_file", 
            "title": "4. Publish the assets in your application with:"
        }, 
        {
            "location": "/scaffold-interface/#5-migrate-for-the-scaffold-interface-table", 
            "text": "$ php artisan migrate", 
            "title": "5. Migrate for the Scaffold Interface table:"
        }, 
        {
            "location": "/scaffold-interface/#6-authentication-scaffolding", 
            "text": "$ php artisan make:auth  Congratulations, you have successfully installed Scaffold Interface!", 
            "title": "6. Authentication scaffolding:"
        }, 
        {
            "location": "/scaffold-interface/#ii-usage", 
            "text": "Go to  http://{your-project-url}/scaffold .     Click on new table and fill the form, then click on ready and done.    MVC files has been generated.    Migrate your schema to the database by clicking on the Migrate button.    Now your model is ready to use.   To delete your entity just rollback its table from database clicking on rollback button first, then click on delete button to be deleted form your app.", 
            "title": "II. Usage"
        }, 
        {
            "location": "/scaffold-interface/#iii-relationships", 
            "text": "", 
            "title": "III. Relationships"
        }, 
        {
            "location": "/scaffold-interface/#1-onetomany", 
            "text": "This package provides a simple short way to generate OneToMany relationship.  We could use our previous example  Product  entity.  So lets create a new entity called  Command .  Before ending creation, click on OneToMany button, choose product table, choose associated field and  click on OneToMany Button again to be confirmed .      This will create  a model with relation methods ,views, controller and migration file containing foreignkeys , for sure you can change whatever you want.  Then click on migration button.", 
            "title": "1. OneToMany"
        }, 
        {
            "location": "/scaffold-interface/#2-manytomany", 
            "text": "To generate ManyToMany relationship between tow tables, click on ManyToMany button, choose tables via combobox (table1,table2) then click on create.  Well, this will create a new pivot table schema ready to be migrated adding ManyToMany raltionship methods to models.  This doesn't create views,controllers and routes, because we belive that each web artisan has his own unique methodology.", 
            "title": "2. ManyToMany"
        }, 
        {
            "location": "/scaffold-interface/#iii-control-panel-adminlte", 
            "text": "Scaffold-interface provids a simple control panel containing user management system using  laravel-permission  package to menage users-roles-permissions easily.   Go a head to terminal and create a new user.   $ php artisan tinker :  $user = new \\App\\User();\n$user- name =  john doe ;\n$user- email =  jhondoe@example.com ;\n$user- password = Hash::make( password );\n$user- save();   Add HasRole dependency to app/User.php:   use Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass User extends Authenticatable\n{\n  use HasRoles;\n\n  // ...\n}   Then click on dashboard button and login.   \n       \n     \n         \n             \n         \n     \n     \n         \n             \n         \n        You can determine if a user has a certain role:   $user- hasRole('writer');   You can also determine if a user has any of a given list of roles:   $user- hasAnyRole(Role::all());   You can determine if a role has a certain permission:   $role- hasPermissionTo('edit articles');  Want more ? check  laravel-permission .", 
            "title": "III. Control Panel AdminLTE"
        }, 
        {
            "location": "/scaffold-interface/#iv-pusher-notifications", 
            "text": "", 
            "title": "IV. Pusher Notifications"
        }, 
        {
            "location": "/scaffold-interface/#what-is-pusher", 
            "text": "Pusher is a hosted service that makes it super-easy to add real-time data and functionality to web and mobile applications.  Pusher sits as a real-time layer between your servers and your clients. Pusher maintains persistent connections to the clients - over WebSocket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.  Pusher offers libraries to integrate into all the main runtimes and frameworks. PHP, Ruby, Python, Java, .NET, Go and Node on the server and JavaScript, Objective-C (iOS) and Java (Android) on the client.  Pusher is a highly scalable real-time solution established in 2010 and has lots of awesome customers including GitHub, MailChimp, CodeShip, The Financial Times, UserVoice, Travis CI and QuizUp.  Before we get started,  you have to create a pusher account.  Please sign up for a free Pusher account via  pusher.com/signup , and create a new app via Pusher dashboard.", 
            "title": "What is pusher ?"
        }, 
        {
            "location": "/scaffold-interface/#configuration", 
            "text": "Go to  .env  and define (app_id,key,and secret)   PUSHER_APP_ID = your_app_id\nPUSHER_KEY = your_key\nPUSHER_SECRET = your_secret   Go to config/pusher.php and define pusher credentials env.       'connections' =  [\n\n        'main' =  [\n            'auth_key' =  env('PUSHER_KEY'),\n            'secret' =  env('PUSHER_SECRET'),\n            'app_id' =  env('PUSHER_APP_ID'),\n            'options' =  [],\n            'host' =  null,\n            'port' =  null,\n            'timeout' =  null,\n        ],", 
            "title": "Configuration."
        }, 
        {
            "location": "/scaffold-interface/#channels-events", 
            "text": "By default  Scaffold-Interface  used  test-channel  as a  channel  and  test-event  as an  event", 
            "title": "Channels &amp; Events."
        }, 
        {
            "location": "/scaffold-interface/#backend", 
            "text": "So when you create a new entity, the package creates back-end pusher notification code automatically behind the scenes.  Check the  Entity Controller , we took our previous example,  Product  entity.", 
            "title": "Backend"
        }, 
        {
            "location": "/scaffold-interface/#frontend", 
            "text": "The fornt end code was already defined in  resources/views/scaffold-interface/layouts/app.blade.php .", 
            "title": "Frontend"
        }, 
        {
            "location": "/scaffold-interface/#contribution", 
            "text": "Any ideas are welcome. Feel free to submit any issues or pull requests.", 
            "title": "Contribution"
        }, 
        {
            "location": "/scaffold-interface/#follow-me", 
            "text": "Twitter :  GitHub :", 
            "title": "Follow me"
        }, 
        {
            "location": "/ajaxis/", 
            "text": "ajaxis", 
            "title": "Ajaxis"
        }, 
        {
            "location": "/ajaxis/#ajaxis", 
            "text": "", 
            "title": "ajaxis"
        }, 
        {
            "location": "/lpackager/", 
            "text": "Lpackager", 
            "title": "Lpackager"
        }, 
        {
            "location": "/lpackager/#lpackager", 
            "text": "", 
            "title": "Lpackager"
        }
    ]
}
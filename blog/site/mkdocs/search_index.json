{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Amranidev Blog\n\n\nHi, my name is Amrani Houssain, I'm a web developer.\n\n\nHopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.\n\n\nFollow Me\n\n\nTwitter :\n\n\n\nGitHub :", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-amranidev-blog", 
            "text": "Hi, my name is Amrani Houssain, I'm a web developer.  Hopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.", 
            "title": "Welcome to Amranidev Blog"
        }, 
        {
            "location": "/#follow-me", 
            "text": "Twitter :  GitHub :", 
            "title": "Follow Me"
        }, 
        {
            "location": "/split-your-laravel-app/", 
            "text": "Split your laravel app\n\n\nSometimes you work on laravel app project, the app get much bigger by the time, especially when it contains a lot of dependencies between modules, and you remind that each module might be splitted or you deserve to make an app for each module, the last one is not a good way because we soak in redundancy.\n\n\nIt's difficult to maintain all your bussiness logic behind the scence.\n\n\nThats why your app deserve to be splitted into packages/modules.\n\n\nSo you can split your modules by creating your packages into your app by yourselves, or \nit recomended to use one of these packages.\n\n\n\n\nLpackager\n \n\n\nmodules\n\n\nlaravel-packager\n\n\n\n\nImplementation\n\n\nIn this example we're going to use \nLpackager\n\n\nLpackager propose a simple way to generate your modules/packages simply without forgeting MVC laravel structure via an artisan command.\n\n\nphp artisan make:package \nPackageName\n \nPath\n \n\"NameSpace\"\n\n\nFile Structure\n\n\n PackageName\n |\n |__config\n |  |__config.php\n |\n |__database\n |  |__migrations \n |\n |__resources\n |  |__views\n |     |__welcome.blade.php\n |\n |__src\n |  |__Http\n |  |  |__Controllers\n |  |  |  |__WelcomeController.php\n |  |  |__routes.php\n |  |__ServiceProvider.php              \n |\n\n\n\n\nAfter \nLpackager\n installation, lets create our first package via an artisan command : \n\n\nphp artisan make:package Client kernel \"Kernel\\Client\"\n    \n\n\n\n\nNote: See Lpackager \nQuick start\n\n\n\n\nGenerate Your (Model,Migration,Controller)\n\n\nAll right, Now our \nClient\n package was created and registred.\n\n\nCheck if evreything is ok : \nhttp://{your-project-url}/Client\n  \n\n\nLests generate Model,Migration,Controller.\n\n\n\n\n\n\nGenerate Model\n\n\nGenerate Person model : \nphp artisan make:model Person --path=kernel/Client/src\n\n\ndon't forget to change \nPeson.php\n NameSpace to \nKernel\\Client\n\n\n\n\n\n\nGenerate Migration\n\n\nGenerate Person migration : \nphp artisan make:migration persons --path=kernel/Client/database/migrations\n\n\ndon't forget to change \nPeson.php\n NameSpace to \nKernel\\Client\\database\n\n\n\n\n\n\nGenerate Controller \n\n\nGenerate PersonController :\nphp artisan make:controller\n\n\ndon't forget to change \nPeson.php\n NameSpace to \nKernel\\Client", 
            "title": "Split your laravel app"
        }, 
        {
            "location": "/split-your-laravel-app/#split-your-laravel-app", 
            "text": "Sometimes you work on laravel app project, the app get much bigger by the time, especially when it contains a lot of dependencies between modules, and you remind that each module might be splitted or you deserve to make an app for each module, the last one is not a good way because we soak in redundancy.  It's difficult to maintain all your bussiness logic behind the scence.  Thats why your app deserve to be splitted into packages/modules.  So you can split your modules by creating your packages into your app by yourselves, or \nit recomended to use one of these packages.   Lpackager    modules  laravel-packager", 
            "title": "Split your laravel app"
        }, 
        {
            "location": "/split-your-laravel-app/#implementation", 
            "text": "In this example we're going to use  Lpackager  Lpackager propose a simple way to generate your modules/packages simply without forgeting MVC laravel structure via an artisan command.  php artisan make:package  PackageName   Path   \"NameSpace\"", 
            "title": "Implementation"
        }, 
        {
            "location": "/split-your-laravel-app/#file-structure", 
            "text": "PackageName\n |\n |__config\n |  |__config.php\n |\n |__database\n |  |__migrations \n |\n |__resources\n |  |__views\n |     |__welcome.blade.php\n |\n |__src\n |  |__Http\n |  |  |__Controllers\n |  |  |  |__WelcomeController.php\n |  |  |__routes.php\n |  |__ServiceProvider.php              \n |  After  Lpackager  installation, lets create our first package via an artisan command :   php artisan make:package Client kernel \"Kernel\\Client\"        Note: See Lpackager  Quick start", 
            "title": "File Structure"
        }, 
        {
            "location": "/split-your-laravel-app/#generate-your-modelmigrationcontroller", 
            "text": "All right, Now our  Client  package was created and registred.  Check if evreything is ok :  http://{your-project-url}/Client     Lests generate Model,Migration,Controller.    Generate Model  Generate Person model :  php artisan make:model Person --path=kernel/Client/src  don't forget to change  Peson.php  NameSpace to  Kernel\\Client    Generate Migration  Generate Person migration :  php artisan make:migration persons --path=kernel/Client/database/migrations  don't forget to change  Peson.php  NameSpace to  Kernel\\Client\\database    Generate Controller   Generate PersonController : php artisan make:controller  don't forget to change  Peson.php  NameSpace to  Kernel\\Client", 
            "title": "Generate Your (Model,Migration,Controller)"
        }, 
        {
            "location": "/", 
            "text": "Welcome to Amranidev Blog\n\n\nHi, my name is Amrani Houssain, I'm a web developer.\n\n\nHopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.\n\n\nFollow Me\n\n\nTwitter :\n\n\n\nGitHub :", 
            "title": "How to use ajaxis"
        }, 
        {
            "location": "/#welcome-to-amranidev-blog", 
            "text": "Hi, my name is Amrani Houssain, I'm a web developer.  Hopefully you will enjoy reading my articles about PHP,Laravel,VueJs,Artificial intelligence and more.", 
            "title": "Welcome to Amranidev Blog"
        }, 
        {
            "location": "/#follow-me", 
            "text": "Twitter :  GitHub :", 
            "title": "Follow Me"
        }, 
        {
            "location": "/scaffold-interface/", 
            "text": "Scaffold-Interface", 
            "title": "Scaffold-interface"
        }, 
        {
            "location": "/scaffold-interface/#scaffold-interface", 
            "text": "", 
            "title": "Scaffold-Interface"
        }, 
        {
            "location": "/ajaxis/", 
            "text": "ajaxis", 
            "title": "Ajaxis"
        }, 
        {
            "location": "/ajaxis/#ajaxis", 
            "text": "", 
            "title": "ajaxis"
        }, 
        {
            "location": "/lpackager/", 
            "text": "Lpackager", 
            "title": "Lpackager"
        }, 
        {
            "location": "/lpackager/#lpackager", 
            "text": "", 
            "title": "Lpackager"
        }
    ]
}